name: üîç PR Validation

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [ opened, synchronize, reopened ]

# Permisos necesarios para que el workflow pueda acceder a la API de GitHub
permissions:
  contents: read          # Para leer el c√≥digo del repositorio
  pull-requests: read     # Para leer informaci√≥n de pull requests
  issues: write          # Para crear y actualizar comentarios en PRs

# Cancelar workflows anteriores si se hace un nuevo push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-check:
    name: üéØ Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          # Necesario para que jscpd pueda comparar contra historial
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json
            shared/package-lock.json
            claude-cli/package-lock.json

      - name: üîß Install dependencies
        run: |
          npm ci
          npm run install:workspaces

      - name: üßπ ESLint Check
        run: |
          echo "üîç Ejecutando controles de ESLint..."
          npm run lint:complexity
        continue-on-error: false

      - name: üîç Duplicate Code Detection
        run: |
          echo "üîç Detectando c√≥digo duplicado..."
          npm run lint:duplicates
        continue-on-error: false

      - name: üìä Generate Quality Report
        if: always()
        run: |
          echo "üìä Generando reporte de calidad..."
          npm run quality:report || true

      - name: üìã Upload Quality Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: quality-reports/
          retention-days: 7

  test-check:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json
            shared/package-lock.json
            claude-cli/package-lock.json

      - name: üîß Install dependencies
        run: |
          npm ci
          npm run install:workspaces

      - name: üß™ Run Tests
        run: |
          echo "üß™ Ejecutando pruebas unitarias..."
          npm run test
        continue-on-error: false

  build-check:
    name: üèóÔ∏è Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json
            backend/package-lock.json
            shared/package-lock.json
            claude-cli/package-lock.json

      - name: üîß Install dependencies
        run: |
          npm ci
          npm run install:workspaces

      - name: üèóÔ∏è Build Project
        run: |
          echo "üèóÔ∏è Construyendo proyecto..."
          npm run build
        continue-on-error: false

  pr-summary:
    name: üìù PR Summary
    runs-on: ubuntu-latest
    needs: [quality-check, test-check, build-check]
    if: always()
    
    steps:
      - name: üìù Create PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const qualityResult = '${{ needs.quality-check.result }}';
            const testResult = '${{ needs.test-check.result }}';
            const buildResult = '${{ needs.build-check.result }}';
            
            const statusEmoji = {
              'success': '‚úÖ',
              'failure': '‚ùå',
              'cancelled': '‚ö†Ô∏è',
              'skipped': '‚è≠Ô∏è'
            };
            
            let summary = '## üîç Resultados de Validaci√≥n PR\n\n';
            summary += '### Checks de Calidad\n';
            summary += `${statusEmoji[qualityResult] || '‚ùì'} **Quality Check**: ${qualityResult}\n`;
            summary += `${statusEmoji[testResult] || '‚ùì'} **Tests**: ${testResult}\n`;
            summary += `${statusEmoji[buildResult] || '‚ùì'} **Build**: ${buildResult}\n\n`;
            summary += '### Detalles\n';
            summary += '‚Ä¢ **ESLint**: Verificaci√≥n de reglas de complejidad y estilo\n';
            summary += '‚Ä¢ **jscpd**: Detecci√≥n de c√≥digo duplicado\n';
            summary += '‚Ä¢ **Tests**: Ejecuci√≥n de pruebas unitarias\n';
            summary += '‚Ä¢ **Build**: Verificaci√≥n de compilaci√≥n\n\n';
            
            if (qualityResult === 'success' && testResult === 'success' && buildResult === 'success') {
              summary += 'üéâ **¬°Todos los checks pasaron correctamente!** El PR est√° listo para revisi√≥n.\n';
            } else {
              summary += '‚ö†Ô∏è **Algunos checks fallaron.** Por favor revisa los errores y corrige antes de hacer merge.\n';
            }
            
            summary += '\n---\n';
            summary += '*Este comentario se genera autom√°ticamente por GitHub Actions*';

            // Buscar comentario anterior del bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Resultados de Validaci√≥n PR')
            );
            
            if (botComment) {
              // Actualizar comentario existente
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              // Crear nuevo comentario
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }